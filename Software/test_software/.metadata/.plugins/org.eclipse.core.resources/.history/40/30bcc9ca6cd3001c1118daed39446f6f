/******************************************************************************/
/*                                                                            */
/* main.c -- Demo project for the PmodOLED IP                                 */
/*                                                                            */
/******************************************************************************/
/* Author: Arthur Brown                                                       */
/* Copyright 2016, Digilent Inc.                                              */
/******************************************************************************/
/* File Description:                                                          */
/*                                                                            */
/* This demo_project initializes and uses the PmodOLED to display strings     */
/* and show different available fill patterns.                                */
/*                                                                            */
/* In order to properly quit the demo, a serial terminal application should   */
/* be connected to your board over UART at the appropriate Baud rate, as      */
/* specified below.                                                           */
/*                                                                            */
/******************************************************************************/
/* Revision History:                                                          */
/*                                                                            */
/*    06/20/2016(ArtVVB):   Created                                           */
/*    12/15/2016(jPeyron):  Edited for better use for OnboardOLED in, as well */
/*                          as inverting the white and black                  */
/*    08/25/2017(ArtVVB):   Added proper cache management functions           */
/*    02/17/2018(atangzwj): Validated for Vivado 2017.4                       */
/*                                                                            */
/******************************************************************************/
/* Baud Rates:                                                                */
/*                                                                            */
/*    Microblaze: 9600 or what was specified in UARTlite core                 */
/*    Zynq: 115200                                                            */
/*                                                                            */
/******************************************************************************/

/* ------------------------------------------------------------ */
/*                  Include File Definitions                    */
/* ------------------------------------------------------------ */

#include <stdio.h>
#include "PmodOLED.h"
#include "sleep.h"
#include "xil_cache.h"
#include "xil_printf.h"
#include "xparameters.h"

uint8_t bitmap[] = {                                    // This bitmap defines the upper 32 bytes of the screen
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// char 0
        0x00, 0x00, 0x00, 0x00, 0xC0, 0x30, 0x0C, 0x02,	// char 1
        0x81, 0x03, 0x05, 0x19, 0x61, 0x81, 0x02, 0x0C,	// char 2
        0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// char 3
        0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x18,	// char 4
        0x18, 0x18, 0x30, 0xE0, 0xC0, 0x00, 0x00, 0x00,	// char 5
        0x18, 0x18, 0x18, 0xF8, 0xF8, 0x18, 0x18, 0x18,	// char 6
        0x00, 0x00, 0x00, 0xE0, 0xF0, 0x18, 0x18, 0x18,	// char 7
        0x18, 0x38, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x18,	// char 8
        0x18, 0x18, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x00,	// char 9
        0x00, 0x00, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00,	// char A
        0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x18,	// char B
        0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,	// char C
        0xF8, 0xF8, 0x38, 0x70, 0xE0, 0x80, 0x00, 0x00,	// char D
        0xF8, 0xF8, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18,	// char E
        0xF8, 0xF8, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,	// char F
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// char 10
        0xC0, 0x30, 0x0C, 0x03, 0xC0, 0x30, 0x0C, 0x03,	// char 11
        0xC0, 0x33, 0x0C, 0x10, 0x60, 0x81, 0x06, 0x18,	// char 12
        0x60, 0x80, 0x03, 0x0C, 0x30, 0xC0, 0x00, 0x00,	// char 13
        0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00,	// char 14
        0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00,	// char 15
        0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00,	// char 16
        0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00,	// char 17
        0x18, 0x18, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00,	// char 18
        0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,	// char 19
        0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,	// char 1A
        0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x18,	// char 1B
        0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,	// char 1C
        0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0x80, 0x00,	// char 1D
        0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// char 1E
        0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// char 1F
		 0x00, 0x00, 0x00, 0x00, 0xC0, 0x30, 0x0C, 0x03,	// 0x00
			0xC0, 0x30, 0x0C, 0x03, 0xC0, 0xB0, 0x8C, 0x83,	// 0x01
			0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x86, 0x98,	// 0x02
			0xE0, 0x81, 0x86, 0x98, 0xE0, 0x00, 0x03, 0x0C,	// 0x03
			0x30, 0xC0, 0x00, 0x00, 0x00, 0x07, 0x07, 0x06,	// 0x04
			0x06, 0x86, 0x83, 0x81, 0x00, 0x00, 0x00, 0x80,	// 0x05
			0x86, 0x86, 0x86, 0x07, 0x07, 0x86, 0x06, 0x06,	// 0x06
			0x00, 0x80, 0x00, 0x01, 0x03, 0x86, 0x86, 0x06,	// 0x07
			0x06, 0x06, 0x87, 0x03, 0x00, 0x00, 0x80, 0x06,	// 0x08
			0x06, 0x86, 0x87, 0x87, 0x06, 0x06, 0x06, 0x00,	// 0x09
			0x00, 0x00, 0x07, 0x87, 0x86, 0x86, 0x86, 0x86,	// 0x0A
			0x06, 0x06, 0x80, 0x00, 0x00, 0x87, 0x07, 0x06,	// 0x0B
			0x86, 0x86, 0x86, 0x86, 0x06, 0x00, 0x00, 0x80,	// 0x0C
			0x87, 0x07, 0x00, 0x00, 0x80, 0x80, 0x81, 0x03,	// 0x0D
			0x07, 0x07, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00,	// 0x0E
			0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// 0x0F
		    0x00, 0x10, 0x2C, 0x43, 0xC0, 0xB0, 0x8C, 0x83,	// 0x10
			0x80, 0x80, 0x8C, 0x8B, 0x88, 0x88, 0x88, 0x88,	// 0x11
			0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	// 0x12
			0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,	// 0x13
			0x88, 0x88, 0x4B, 0x3C, 0x00, 0x00, 0x00, 0x00,	// 0x14
			0x00, 0x3F, 0x24, 0x24, 0x1F, 0x00, 0x00, 0x3F,	// 0x15
			0x24, 0x24, 0x20, 0x00, 0x00, 0x03, 0x04, 0x38,	// 0x16
			0x04, 0x03, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x1F,	// 0x17
			0x00, 0x00, 0x3F, 0x01, 0x0E, 0x10, 0x3F, 0x00,	// 0x18
			0x00, 0x3F, 0x20, 0x20, 0x1F, 0x00, 0x00, 0x00,	// 0x19
			0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00,	// 0x1A
			0x00, 0x00, 0x3F, 0x04, 0x04, 0x3F, 0x00, 0x00,	// 0x1B
			0x3F, 0x24, 0x24, 0x20, 0x00, 0x00, 0x1F, 0x20,	// 0x1C
			0x20, 0x1F, 0x00, 0x00, 0x3F, 0x04, 0x0C, 0x33,	// 0x1D
			0x00, 0x00, 0x03, 0x04, 0x38, 0x04, 0x03, 0x00,	// 0x1E
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// 0x1F
};


uint8_t bitmap2[] = {                                    // This bitmap defines the upper 32 bytes of the screen
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3f,
		0x3f, 0x3f, 0x3f, 0x9f, 0x9f, 0x9f, 0xdf, 0xcf, 0x4f, 0x4f, 0x4f, 0x6f, 0x67, 0x27, 0x27, 0x27,
		0x27, 0x37, 0x37, 0x13, 0x13, 0x13, 0x13, 0x93, 0xd3, 0xfb, 0xfb, 0xfb, 0xfb, 0xf9, 0xf9, 0xf9,
		0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0x0d, 0x1d, 0x1d, 0x3d, 0x3d, 0x3d,
		0x3d, 0x3d, 0x3d, 0x1d, 0x1d, 0x0d, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9,
		0xf9, 0xf9, 0xf9, 0xfb, 0xfb, 0xfb, 0xfb, 0xd3, 0x93, 0x13, 0x13, 0x13, 0x13, 0x37, 0x37, 0x27,
		0x27, 0x27, 0x27, 0x67, 0x6f, 0x4f, 0x4f, 0x4f, 0xcf, 0xdf, 0x9f, 0x9f, 0x9f, 0x3f, 0x3f, 0x3f,
		0x3f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0x3f, 0x1f, 0x0f, 0x07, 0xc3, 0xe3, 0xf1, 0x79, 0x18, 0x0c, 0x0c, 0x06, 0x06, 0x03,
		0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
		0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
		0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03,
		0x03, 0x06, 0x06, 0x0c, 0x0c, 0x18, 0x79, 0xf1, 0xe3, 0xc3, 0x07, 0x0f, 0x1f, 0x3f, 0xff, 0xff,
		0xff, 0xff, 0xfc, 0xf8, 0xf0, 0xe0, 0xc3, 0xc7, 0x8f, 0x9e, 0x1c, 0x38, 0x30, 0x60, 0x60, 0x40,
		0xc0, 0xc0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xe0, 0xf0, 0xf0, 0xf0,
		0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0,
		0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
		0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
		0xf0, 0xf0, 0xf0, 0xe0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xc0,
		0x40, 0x60, 0x60, 0x30, 0x38, 0x1c, 0x9e, 0x8f, 0xc7, 0xc3, 0xe0, 0xf0, 0xf8, 0xfc, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe,
		0xfc, 0xfc, 0xfc, 0xf9, 0xf9, 0xf9, 0xf9, 0xfb, 0xf2, 0xf2, 0xf2, 0xf2, 0xf6, 0xe5, 0xe7, 0xe7,
		0xe7, 0xe7, 0xef, 0xef, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xdf, 0xdf, 0xdf, 0xdf, 0x9f,
		0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9e, 0x9c,
		0x9c, 0x9e, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f,
		0x9f, 0xdf, 0xdf, 0xdf, 0xdf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xef, 0xef, 0xe7, 0xe7,
		0xe7, 0xe7, 0xe5, 0xf6, 0xf2, 0xf2, 0xf2, 0xf2, 0xfb, 0xf9, 0xf9, 0xf9, 0xf9, 0xfc, 0xfc, 0xfc,
		0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

uint8_t bitmap3[] = {
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0xcf, 0xf7,
			0xfb, 0xff, 0xfd, 0xff, 0xfe, 0xff, 0xbf, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x7f,
			0x7f, 0xff, 0xff, 0x3f, 0x3f, 0x38, 0xf7, 0xef, 0xdf, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x7f,
			0x3f, 0x3f, 0xbf, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0xbf, 0xbf, 0xbf, 0x3f, 0x7f,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x1f, 0x9f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f,
			0x3f, 0x7f, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfd, 0xfb, 0xf3, 0xe7, 0xcf, 0x3f, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0xe7, 0xcf,
			0xdf, 0xbf, 0x7f, 0x7f, 0xff, 0xff, 0xf9, 0xf8, 0xf8, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xfc, 0xf8,
			0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0xfc,
			0xfc, 0xfd, 0xfd, 0xfd, 0xf4, 0xfc, 0xe8, 0xe8, 0xe8, 0xc8, 0xd8, 0xd8, 0xb1, 0xb3, 0xff, 0xff,
			0xff, 0xff, 0xfb, 0xfb, 0xfa, 0xfa, 0xfa, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8,
			0xfc, 0xff, 0xff, 0xff, 0xfb, 0xf3, 0x99, 0xf8, 0xfc, 0xfd, 0xfd, 0xfd, 0xfc, 0xfc, 0xf8, 0xf8,
			0xf8, 0xf8, 0xf8, 0xf8, 0xf9, 0xfb, 0x7f, 0xff, 0xbf, 0xdf, 0xef, 0xf7, 0xf8, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0xff, 0xff, 0xf7, 0xf7, 0xf7, 0xf7, 0xfb, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff

};

uint8_t bitmap4[] = {
		0xff, 0x7f, 0x7f, 0xff, 0xbf, 0xbf, 0xff, 0xdf, 0xdf, 0xff, 0xff, 0xef, 0xef, 0x7f, 0x77, 0xf7,
			0xbf, 0xbb, 0xfb, 0xdf, 0xdf, 0x7d, 0xed, 0xaf, 0xbf, 0xdf, 0xd7, 0xd7, 0xf7, 0xe7, 0xe7, 0xe7,
			0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xff, 0x3f, 0x5f, 0xdf, 0xff, 0xef, 0xef, 0xef, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7,
			0xf7, 0xf7, 0xf7, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xef, 0xef, 0xff, 0xff, 0xdf, 0xdf,
			0xb7, 0xb7, 0x77, 0xf7, 0xf7, 0xf7, 0xe7, 0xe7, 0xf7, 0xd7, 0xd7, 0xc7, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xfd, 0xdd, 0xdf, 0xfb, 0xbb, 0xbf, 0xff, 0xf7,
			0x77, 0x7f, 0xef, 0xef, 0xff, 0xdf, 0xdf, 0xff, 0xff, 0xbf, 0xbf, 0xff, 0x7f, 0x7f, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xfd, 0xfd, 0xfb, 0xfb, 0xff, 0xf7, 0xf7, 0xfe, 0xee, 0xff,
			0xdd, 0xdd, 0xfb, 0xb9, 0xb8, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xbf,
			0x3f, 0x3f, 0xbf, 0xbf, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xff,
			0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
			0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7d, 0x7d, 0x7d, 0x7d,
			0x7d, 0x7d, 0xfd, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfa, 0xfa, 0xfa, 0xfe,
			0xfe, 0xf6, 0xf6, 0xfe, 0xee, 0xee, 0xee, 0x76, 0x77, 0xff, 0xbb, 0xbb, 0xff, 0xdd, 0xff, 0xee,
			0xee, 0xff, 0xf7, 0xf7, 0xff, 0xfb, 0xff, 0xfd, 0xfd, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xfd, 0xff, 0xfb, 0xfb, 0xff,
			0xf7, 0xf7, 0xff, 0xee, 0xfe, 0xdd, 0xdd, 0xfd, 0xbd, 0xbf, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xbf, 0xbf, 0x7f, 0x7f, 0xff, 0xfd, 0xfd, 0xbd, 0xbf, 0xbb, 0xbb, 0xbf, 0xbf,
			0xbf, 0xbf, 0xbf, 0xbf, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xbf, 0xbf, 0xff, 0xff, 0xfb, 0xfb,
			0xfb, 0xfb, 0x7b, 0x7b, 0xff, 0xbf, 0xfc, 0xdc, 0xdf, 0xff, 0xef, 0xef, 0xff, 0xf7, 0xff, 0xfb,
			0xfb, 0xff, 0xfd, 0xfd, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff,
			0xfd, 0xff, 0xfb, 0xfb, 0xff, 0xf7, 0xf7, 0xef, 0xee, 0xfe, 0xdf, 0xdd, 0xfd, 0xbb, 0xbb, 0xbb,
			0xbb, 0xff, 0xdd, 0xdd, 0xfe, 0xee, 0xef, 0xf7, 0xf7, 0xff, 0xfb, 0xfb, 0xff, 0xfd, 0xff, 0xfe,
			0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
/* ------------------------------------------------------------ */
/*                  Global Variables                            */
/* ------------------------------------------------------------ */

PmodOLED myDevice;

/* ------------------------------------------------------------ */
/*                  Forward Declarations                        */
/* ------------------------------------------------------------ */

void DemoInitialize();
void DemoRun();
void DemoCleanup();
void EnableCaches();
void DisableCaches();

// To change between PmodOLED and OnBoardOLED is to change Orientation
const u8 orientation = 0x0; // Set up for Normal PmodOLED(false) vs normal
                            // Onboard OLED(true)
const u8 invert = 0x0; // true = whitebackground/black letters
                       // false = black background /white letters

/* ------------------------------------------------------------ */
/*                  Function Definitions                        */
/* ------------------------------------------------------------ */

int main() {
   DemoInitialize();
   DemoRun();
   DemoCleanup();

   return 0;
}

void DemoInitialize() {
   EnableCaches();
   OLED_Begin(&myDevice, XPAR_PMODOLED_0_AXI_LITE_GPIO_BASEADDR,
         XPAR_PMODOLED_0_AXI_LITE_SPI_BASEADDR, orientation, invert);
}

/* ------------------------------------------------------------ */
/*** DemoRun()
**
**   Parameters:
**      none
**
**   Return Value:
**      none
**
**   Errors:
**      If the demo is shut down without properly exiting, does not reinitialize
**      properly.
**
**   Description:
**      Displays Demo message and each available Fill Pattern.
**      Pauses between runs to check if user wants to continue, if not, exits.
**      To be safe, exit through prompt before closing demo.
**      Requires UART connection to terminal program on PC.
*/
void DemoRun() {
   int irow, ib, i;
   u8 *pat;
   char c;

   xil_printf("UART and SPI opened for PmodOLED Demo\n\r");

   while (1) {
      xil_printf("entering loop\r\n");
      // Choosing Fill pattern 0
      pat = OLED_GetStdPattern(0);
      OLED_SetFillPattern(&myDevice, pat);
      // Turn automatic updating off
      OLED_SetCharUpdate(&myDevice, 0);

      // Draw a rectangle over writing then slide the rectangle down slowly
      // displaying all writing
      for (irow = 0; irow < OledRowMax; irow++) {
         OLED_ClearBuffer(&myDevice);
         OLED_SetCursor(&myDevice, 0, 0);
         OLED_PutString(&myDevice, "PmodOLED");
         OLED_SetCursor(&myDevice, 0, 1);
         OLED_PutString(&myDevice, "by Digilent");
         OLED_SetCursor(&myDevice, 0, 2);
         OLED_PutString(&myDevice, "Simple Demo");

         OLED_MoveTo(&myDevice, 0, irow);
         OLED_FillRect(&myDevice, 127, 31);
         OLED_MoveTo(&myDevice, 0, irow);
         OLED_LineTo(&myDevice, 127, irow);
         OLED_Update(&myDevice);
         usleep(100000);
      }

      sleep(1);
      // Blink the display three times.
      for (i = 0; i < 3; i++) {
         OLED_DisplayOff(&myDevice);
         usleep(5000);
         OLED_DisplayOn(&myDevice);
         usleep(5000);
      }

      // Now erase the characters from the display
      for (irow = OledRowMax - 1; irow >= 0; irow--) {
         OLED_SetDrawColor(&myDevice, 1);
         OLED_SetDrawMode(&myDevice, OledModeSet);
         OLED_MoveTo(&myDevice, 0, irow);
         OLED_LineTo(&myDevice, 127, irow);
         OLED_Update(&myDevice);
         usleep(25000);
         OLED_SetDrawMode(&myDevice, OledModeXor);
         OLED_MoveTo(&myDevice, 0, irow);
         OLED_LineTo(&myDevice, 127, irow);
         OLED_Update(&myDevice);
      }


      sleep(2);
      OLED_ClearBuffer(&myDevice);
      OLED_SetCursor(&myDevice, 0, 0);
              OLED_PutString(&myDevice, "We are using ZYBO-Z7:");
              OLED_Update(&myDevice);
      sleep(5);
           // OLED_SetDrawMode(&myDevice, OledModeSet);
            OLED_ClearBuffer(&myDevice);
            OLED_SetCursor(&myDevice, 0, 0);
            OLED_PutBmp(&myDevice,128,32,bitmap);  //place the upper 32 bits
            OLED_Update(&myDevice);
       sleep(6);

       sleep(2);
       OLED_ClearBuffer(&myDevice);
          OLED_SetCursor(&myDevice, 0, 0);
                  OLED_PutString(&myDevice, "We like to meet Batman:");
                  OLED_Update(&myDevice);
          sleep(5);

            // OLED_SetDrawMode(&myDevice, OledModeSet);
                       OLED_ClearBuffer(&myDevice);
                       OLED_SetCursor(&myDevice, 0, 0);
                       OLED_PutBmp(&myDevice,128,32,bitmap2);  //place the upper 32 bits
                       OLED_Update(&myDevice);
          sleep(10);

          sleep(2);
          OLED_ClearBuffer(&myDevice);
             OLED_SetCursor(&myDevice, 0, 0);
                     OLED_PutString(&myDevice, "We like to call NASA:");
                     OLED_Update(&myDevice);
             sleep(5);

          // OLED_SetDrawMode(&myDevice, OledModeSet);
                                OLED_ClearBuffer(&myDevice);
                                OLED_SetCursor(&myDevice, 0, 0);
                                OLED_PutBmp(&myDevice,128,32,bitmap3);  //place the upper 32 bits
                                OLED_Update(&myDevice);
                   sleep(10);

                   sleep(2);
                            OLED_ClearBuffer(&myDevice);
                               OLED_SetCursor(&myDevice, 0, 0);
                                       OLED_PutString(&myDevice, "We like to meet Superman:");
                                       OLED_Update(&myDevice);
                               sleep(5);
               // OLED_SetDrawMode(&myDevice, OledModeSet);
                                                 OLED_ClearBuffer(&myDevice);
                                                 OLED_SetCursor(&myDevice, 0, 0);
                                                 OLED_PutBmp(&myDevice,128,32,bitmap4);  //place the upper 32 bits
                                                 OLED_Update(&myDevice);
                                    sleep(20);
/*
      // Draw a rectangle in center of screen
      // Display the 8 different patterns available
      OLED_SetDrawMode(&myDevice, OledModeSet);

      for (ib = 1; ib < 8; ib++) {
         OLED_ClearBuffer(&myDevice);
         pat = OLED_GetStdPattern(ib);
         OLED_SetFillPattern(&myDevice, pat);
         OLED_MoveTo(&myDevice, 55, 1);
         OLED_FillRect(&myDevice, 75, 27);
         OLED_DrawRect(&myDevice, 75, 27);
         OLED_Update(&myDevice);

         sleep(1);
      }*/









#ifdef __MICROBLAZE__
      c = 'q';
#else
      xil_printf("(q)uit or any key to continue:\n\r");
      c = inbyte();
#endif

      if (c == 'q' || c == 'Q')
         break;
   }
   xil_printf("Exiting PmodOLED Demo\n\r");
}

void DemoCleanup() {
   OLED_End(&myDevice);
   DisableCaches();
}

void EnableCaches() {
#ifdef __MICROBLAZE__
#ifdef XPAR_MICROBLAZE_USE_ICACHE
   Xil_ICacheEnable();
#endif
#ifdef XPAR_MICROBLAZE_USE_DCACHE
   Xil_DCacheEnable();
#endif
#endif
}

void DisableCaches() {
#ifdef __MICROBLAZE__
#ifdef XPAR_MICROBLAZE_USE_DCACHE
   Xil_DCacheDisable();
#endif
#ifdef XPAR_MICROBLAZE_USE_ICACHE
   Xil_ICacheDisable();
#endif
#endif
}

